{"version":3,"sources":["components/Clock/Clock.tsx","components/TextArea/elements/Span.tsx","store/actions/text.ts","components/TextArea/elements/InputForm.tsx","components/TextArea/TextArea.tsx","App.tsx","store/reducers/index.ts","store/reducers/text.ts","index.tsx"],"names":["Clock","useState","Date","date","setDate","useEffect","id","setInterval","clearInterval","className","toLocaleTimeString","navigator","language","hour","minute","second","Span","timeout","string","opacity","setOpacity","setTimeout","clearTimeout","style","addText","newText","type","payload","InputForm","inputText","setInputText","dispatch","useDispatch","onSubmit","e","preventDefault","textActions","required","placeholder","value","onChange","target","TextArea","textArray","useSelector","store","text","ref","useRef","current","scrollIntoView","behavior","hidden","map","index","length","split","word","i","App","margin","setMargin","handlers","useSwipeable","onSwipedLeft","velocity","onSwipedRight","marginLeft","reducers","combineReducers","action","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gUAGaA,EAAkB,WAC7B,MAAwBC,mBAAS,IAAIC,MAArC,mBAAOC,EAAP,KAAaC,EAAb,KASA,OARAC,qBAAU,WACR,IAAMC,EAAKC,aAAY,WACrBH,EAAQ,IAAIF,QACX,KACH,OAAO,WACLM,cAAcF,MAEf,IAED,qBAAKG,UAAU,kBAAf,SACGN,EAAKO,mBAAmBC,UAAUC,SAAU,CAC3CC,KAAM,UACNC,OAAQ,UACRC,OAAQ,e,OCfHC,G,MAAsD,SAAC,GAG7D,IAFLC,EAEI,EAFJA,QACAC,EACI,EADJA,OAEA,EAA8BjB,mBAAS,GAAvC,mBAAOkB,EAAP,KAAgBC,EAAhB,KAUA,OATAf,qBAAU,WACR,IAAMC,EAAKe,YAAW,WACpBD,EAAW,KACVH,GACH,OAAO,WACLK,aAAahB,MAEd,IAGD,uBAAMG,UAAU,OAAOc,MAAO,CAAEJ,QAASA,GAAzC,UACGD,EAAQ,SCnBFM,EAAU,SAACC,GAAD,MAAsB,CAC3CC,KAAM,eACNC,QAAS,CACPF,aCCSG,EAAsB,WACjC,MAAkC3B,mBAAS,IAA3C,mBAAO4B,EAAP,KAAkBC,EAAlB,KACMC,EAAWC,cACjB,OACE,uBACEvB,UAAU,YACVwB,SAAU,SAACC,GACTA,EAAEC,iBACFJ,EAASK,EAAYZ,QAAQK,IAC7BC,EAAa,KALjB,UAQE,uBACEO,UAAQ,EACRC,YAAY,WACZC,MAAOV,EACPW,SAAU,SAACN,GAAD,OAAOJ,EAAaI,EAAEO,OAAOF,UAEzC,8CChBOG,G,MAAqB,WAChC,IAAMC,EAAYC,aAAY,SAACC,GAAD,OAA+BA,EAAMC,QAC7DC,EAAMC,iBAAuB,MAQnC,OAPA3C,qBAAU,WACJ0C,EAAIE,SACNF,EAAIE,QAAQC,eAAe,CACzBC,SAAU,aAGb,CAACR,IAEF,sBAAKlC,UAAU,WAAW2C,QAAQ,EAAlC,UACE,cAAC,EAAD,IACA,qBAAK3C,UAAU,WAAf,SACGkC,EAAUU,KAAI,SAACnB,EAAWoB,GACzB,OAAIA,IAAUX,EAAUY,OAAS,EAE7B,qBAAKR,IAAKA,EAAV,SACGb,EAAEsB,MAAM,KAAKH,KAAI,SAACI,EAAcC,GAAf,OAChB,cAAC,EAAD,CAEEzC,QAAS,KAAOyC,EAAI,GACpBxC,OAAQuC,GAFH,OAASC,QAQjB,4BAAsBxB,GAAd,IAAMoB,a,cCDhBK,MA5Bf,WACE,MAA4B1D,mBAAS,GAArC,mBAAO2D,EAAP,KAAeC,EAAf,KACMC,EAAWC,uBAAa,CAC5BC,aAAc,SAAC9B,GACE,IAAX0B,GAAgB1B,EAAE+B,UAAY,GAChCJ,GAAW,MAGfK,cAAe,SAAChC,IACE,MAAZ0B,GAAmB1B,EAAE+B,UAAY,GACnCJ,EAAU,MAIhB,OACE,6CAAKpD,UAAU,aAAgBqD,GAA/B,aACE,sBAAKrD,UAAU,WAAWc,MAAO,CAAE4C,WAAW,GAAD,OAAKP,EAAL,OAA7C,UACE,qBAAKnD,UAAU,qBAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,sBAAf,SACE,cAAC,EAAD,a,eCvBG2D,EAAWC,YAAgB,CAAEvB,KCHtB,WAGd,IAFJD,EAEG,uDAFe,GAClByB,EACG,uCACH,OAAQA,EAAO5C,MACb,IAAK,eACH,IAAQD,EAAY6C,EAAO3C,QAAnBF,QACR,MAAM,GAAN,mBAAWoB,GAAX,CAAkBpB,IAEpB,QACE,OAAOoB,MCHPA,EAAQ0B,YAAYH,GAE1BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU7B,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ8B,SAASC,eAAe,W","file":"static/js/main.b5e427c8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./clock.css\";\n\nexport const Clock: React.FC = () => {\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    const id = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n    return () => {\n      clearInterval(id);\n    };\n  }, []);\n  return (\n    <div className=\"clock-container\">\n      {date.toLocaleTimeString(navigator.language, {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n      })}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./span.css\";\n\nexport const Span: React.FC<{ timeout: number; string: string }> = ({\n  timeout,\n  string,\n}) => {\n  const [opacity, setOpacity] = useState(0);\n  useEffect(() => {\n    const id = setTimeout(() => {\n      setOpacity(1);\n    }, timeout);\n    return () => {\n      clearTimeout(id);\n    };\n  }, []);\n\n  return (\n    <span className=\"span\" style={{ opacity: opacity }}>\n      {string}{\" \"}\n    </span>\n  );\n};\n","export const addText = (newText: string) => ({\n  type: \"ADD_NEW_TEXT\",\n  payload: {\n    newText,\n  },\n});\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { textActions } from \"store/actions\";\n\nexport const InputForm: React.FC = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const dispatch = useDispatch();\n  return (\n    <form\n      className=\"inputArea\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        dispatch(textActions.addText(inputText));\n        setInputText(\"\");\n      }}\n    >\n      <input\n        required\n        placeholder=\"Textarea\"\n        value={inputText}\n        onChange={(e) => setInputText(e.target.value)}\n      ></input>\n      <button>Send</button>\n    </form>\n  );\n};\n","import React, { useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Span } from \"./elements/Span\";\nimport { InputForm } from \"./elements/InputForm\";\nimport \"./textArea.css\";\n\nexport const TextArea: React.FC = () => {\n  const textArray = useSelector((store: { text: string[] }) => store.text);\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.scrollIntoView({\n        behavior: \"smooth\",\n      });\n    }\n  }, [textArray]);\n  return (\n    <div className=\"textArea\" hidden={false}>\n      <InputForm />\n      <div className=\"messages\">\n        {textArray.map((e: string, index: number) => {\n          if (index === textArray.length - 1) {\n            return (\n              <div ref={ref}>\n                {e.split(\" \").map((word: string, i: number) => (\n                  <Span\n                    key={\"span\" + i}\n                    timeout={400 * (i + 1)}\n                    string={word}\n                  />\n                ))}\n              </div>\n            );\n          }\n          return <p key={\"p\" + index}>{e}</p>;\n        })}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Clock, TextArea } from \"./components\";\nimport { useSwipeable } from \"react-swipeable\";\nimport \"./App.css\";\n\nfunction App() {\n  const [margin, setMargin] = useState(0);\n  const handlers = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (margin === 0 && e.velocity >= 1) {\n        setMargin(-100);\n      }\n    },\n    onSwipedRight: (e) => {\n      if (margin === -100 && e.velocity >= 1) {\n        setMargin(0);\n      }\n    },\n  });\n  return (\n    <div className=\"container\" {...handlers}>\n      <div className=\"elements\" style={{ marginLeft: `${margin}vw` }}>\n        <div className=\"block-left element\">\n          <TextArea />\n        </div>\n        <div className=\"block-right element\">\n          <Clock />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { text } from \"./text\";\n\nexport const reducers = combineReducers({ text });\n","export const text = (\n  store: string[] = [],\n  action: { type: string; payload: { newText: string } }\n) => {\n  switch (action.type) {\n    case \"ADD_NEW_TEXT\": {\n      const { newText } = action.payload;\n      return [...store, newText];\n    }\n    default: {\n      return store;\n    }\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { reducers } from \"store/reducers\";\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}